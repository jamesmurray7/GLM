kk <- c(beta, sigma, gamma)
if(sigmas[k] != 0) sigma.name.lookup <- paste0(responses[[k]], '_var.e') else sigma.name.lookup <- NULL
kk.names.lookup <- c(nb, sigma.name.lookup, names(gamma))
kSE <- SE[match(kk.names.lookup, names(SE))]#SE associated with these coeffs
lb <- kk - qz * kSE; ub <- kk + qz * kSE
this.out <- setNames(data.frame(.to3dp(kk), .to3dp(kSE), .to3dp(lb), .to3dp(ub)),
c('Estimate', 'SE', '2.5%', '97.5%'))
this.out
})
tab <- do.call(rbind, MakeTables)
nr <- nrow(tab)
tab$Parameter <- rownames(tab)
tab$Parameter <- paste0('$\\', tab$Parameter, '$')
tab2 <- as.data.frame(cbind(Parameter = tab$Parameter, apply(tab[, -5], 2, function(x) format(round(x, 3), nsmall = 3))))
tab3 <- cbind(Parameter = tab$Parameter, `Mean (SE)` = paste0(tab2$Estimate, ' (', tab2$SE, ')'),
`95% CI` = paste0('[', tab2$`2.5%`, ', ', tab2$`97.5%`, ']'))
# Splitting out into multiple columns -->
if(nr > 15 && is.null(max.row)) cat('Consider breaking at a certain number of rows and presenting a "wider" table.\n\n')
if(!is.null(max.row)){
if(max.row <= nr) stop('max.row must exceed the number of rows in output table: ', nr, '.\n')
# Work out how many 'cbinds' we'll need to do.
num.splits <- (nr %/% max.row) + 1
nr.each <- suppressWarnings(split(1:nr, rep(1:num.splits, each = ceiling(nr/num.splits))))
split.tab <- lapply(nr.each, function(k){
x <- tab3[k,]
while(nrow(x) < max.row){
x <- rbind(x, c('-','-','-'))
}
x
})
tab3 <- do.call(cbind, split.tab)
}
xt <- xtable::xtable(tab3)
print(xt,
include.rownames = FALSE,
sanitize.text.function = identity)
}
fit2xtab(fullfit)
fit2xtab(fullfit)
sapply(10:20, function(n) cat('break at n rows --> ', (nr%/%10+1), 'columns.'))
fit2xtab <- function(fit, max.row = NULL){
if(is.null(fit$SE)) stop('Need to run EM with post.process = T')
qz <- qnorm(.975)
.to3dp <- function(x) round(x, 3)
# Model fit info
K <- length(fit$ResponseInfo)
responses <- lapply(sapply(fit$ResponseInfo, strsplit, '\\s\\('), el, 1)
families <- unlist(fit$family)
# Standard errors and parameter estimates.
SE <- fit$SE
D <- fit$co$D
betas <- fit$co$beta
sigmas <- unlist(fit$co$sigma)
gammas <- fit$co$gamma
zetas <- fit$co$zeta
MakeTables <- lapply(1:K, function(k){
nb <- names(betas)[grepl(responses[[k]], names(betas))]
nb2 <- paste0('beta_{', k, (seq(0, (length(nb) - 1))), '}')
beta <- setNames(betas[grepl(responses[[k]], names(betas))], nb2)
if(sigmas[k] != 0) sigma <- setNames(sigmas[k], paste0('sigma^2_', k)) else sigma <- NULL
gamma <- setNames(gammas[k], paste0('gamma_', k))
kk <- c(beta, sigma, gamma)
if(sigmas[k] != 0) sigma.name.lookup <- paste0(responses[[k]], '_var.e') else sigma.name.lookup <- NULL
kk.names.lookup <- c(nb, sigma.name.lookup, names(gamma))
kSE <- SE[match(kk.names.lookup, names(SE))]#SE associated with these coeffs
lb <- kk - qz * kSE; ub <- kk + qz * kSE
this.out <- setNames(data.frame(.to3dp(kk), .to3dp(kSE), .to3dp(lb), .to3dp(ub)),
c('Estimate', 'SE', '2.5%', '97.5%'))
this.out
})
tab <- do.call(rbind, MakeTables)
nr <- nrow(tab)
tab$Parameter <- rownames(tab)
tab$Parameter <- paste0('$\\', tab$Parameter, '$')
tab2 <- as.data.frame(cbind(Parameter = tab$Parameter, apply(tab[, -5], 2, function(x) format(round(x, 3), nsmall = 3))))
tab3 <- cbind(Parameter = tab$Parameter, `Mean (SE)` = paste0(tab2$Estimate, ' (', tab2$SE, ')'),
`95% CI` = paste0('[', tab2$`2.5%`, ', ', tab2$`97.5%`, ']'))
# Splitting out into multiple columns -->
if(nr > 15 && is.null(max.row)){
cat('Consider breaking at a certain number of rows and presenting a "wider" table.\n')
sapply(10:20, function(n) cat('break at n rows --> ', (nr%/%10+1), 'columns.\n'))
}
if(!is.null(max.row)){
if(max.row <= nr) stop('max.row must exceed the number of rows in output table: ', nr, '.\n')
# Work out how many 'cbinds' we'll need to do.
num.splits <- (nr %/% max.row) + 1
nr.each <- suppressWarnings(split(1:nr, rep(1:num.splits, each = ceiling(nr/num.splits))))
split.tab <- lapply(nr.each, function(k){
x <- tab3[k,]
while(nrow(x) < max.row){
x <- rbind(x, c('-','-','-'))
}
x
})
tab3 <- do.call(cbind, split.tab)
}
xt <- xtable::xtable(tab3)
print(xt,
include.rownames = FALSE,
sanitize.text.function = identity)
}
fit2xtab(fullfit)
fit2xtab <- function(fit, max.row = NULL){
if(is.null(fit$SE)) stop('Need to run EM with post.process = T')
qz <- qnorm(.975)
.to3dp <- function(x) round(x, 3)
# Model fit info
K <- length(fit$ResponseInfo)
responses <- lapply(sapply(fit$ResponseInfo, strsplit, '\\s\\('), el, 1)
families <- unlist(fit$family)
# Standard errors and parameter estimates.
SE <- fit$SE
D <- fit$co$D
betas <- fit$co$beta
sigmas <- unlist(fit$co$sigma)
gammas <- fit$co$gamma
zetas <- fit$co$zeta
MakeTables <- lapply(1:K, function(k){
nb <- names(betas)[grepl(responses[[k]], names(betas))]
nb2 <- paste0('beta_{', k, (seq(0, (length(nb) - 1))), '}')
beta <- setNames(betas[grepl(responses[[k]], names(betas))], nb2)
if(sigmas[k] != 0) sigma <- setNames(sigmas[k], paste0('sigma^2_', k)) else sigma <- NULL
gamma <- setNames(gammas[k], paste0('gamma_', k))
kk <- c(beta, sigma, gamma)
if(sigmas[k] != 0) sigma.name.lookup <- paste0(responses[[k]], '_var.e') else sigma.name.lookup <- NULL
kk.names.lookup <- c(nb, sigma.name.lookup, names(gamma))
kSE <- SE[match(kk.names.lookup, names(SE))]#SE associated with these coeffs
lb <- kk - qz * kSE; ub <- kk + qz * kSE
this.out <- setNames(data.frame(.to3dp(kk), .to3dp(kSE), .to3dp(lb), .to3dp(ub)),
c('Estimate', 'SE', '2.5%', '97.5%'))
this.out
})
tab <- do.call(rbind, MakeTables)
nr <- nrow(tab)
tab$Parameter <- rownames(tab)
tab$Parameter <- paste0('$\\', tab$Parameter, '$')
tab2 <- as.data.frame(cbind(Parameter = tab$Parameter, apply(tab[, -5], 2, function(x) format(round(x, 3), nsmall = 3))))
tab3 <- cbind(Parameter = tab$Parameter, `Mean (SE)` = paste0(tab2$Estimate, ' (', tab2$SE, ')'),
`95% CI` = paste0('[', tab2$`2.5%`, ', ', tab2$`97.5%`, ']'))
# Splitting out into multiple columns -->
if(nr > 15 && is.null(max.row)){
cat('Consider breaking at a certain number of rows and presenting a "wider" table.\nnrows: ', nr, '\n')
}
if(!is.null(max.row)){
if(max.row <= nr) stop('max.row must exceed the number of rows in output table: ', nr, '.\n')
# Work out how many 'cbinds' we'll need to do.
num.splits <- (nr %/% max.row) + 1
nr.each <- suppressWarnings(split(1:nr, rep(1:num.splits, each = ceiling(nr/num.splits))))
split.tab <- lapply(nr.each, function(k){
x <- tab3[k,]
while(nrow(x) < max.row){
x <- rbind(x, c('-','-','-'))
}
x
})
tab3 <- do.call(cbind, split.tab)
}
xt <- xtable::xtable(tab3)
print(xt,
include.rownames = FALSE,
sanitize.text.function = identity)
}
fit2xtab(fullfit)
fit2xtab(fullfit, 15)
fit2xtab <- function(fit, max.row = NULL){
if(is.null(fit$SE)) stop('Need to run EM with post.process = T')
qz <- qnorm(.975)
.to3dp <- function(x) round(x, 3)
# Model fit info
K <- length(fit$ResponseInfo)
responses <- lapply(sapply(fit$ResponseInfo, strsplit, '\\s\\('), el, 1)
families <- unlist(fit$family)
# Standard errors and parameter estimates.
SE <- fit$SE
D <- fit$co$D
betas <- fit$co$beta
sigmas <- unlist(fit$co$sigma)
gammas <- fit$co$gamma
zetas <- fit$co$zeta
MakeTables <- lapply(1:K, function(k){
nb <- names(betas)[grepl(responses[[k]], names(betas))]
nb2 <- paste0('beta_{', k, (seq(0, (length(nb) - 1))), '}')
beta <- setNames(betas[grepl(responses[[k]], names(betas))], nb2)
if(sigmas[k] != 0) sigma <- setNames(sigmas[k], paste0('sigma^2_', k)) else sigma <- NULL
gamma <- setNames(gammas[k], paste0('gamma_', k))
kk <- c(beta, sigma, gamma)
if(sigmas[k] != 0) sigma.name.lookup <- paste0(responses[[k]], '_var.e') else sigma.name.lookup <- NULL
kk.names.lookup <- c(nb, sigma.name.lookup, names(gamma))
kSE <- SE[match(kk.names.lookup, names(SE))]#SE associated with these coeffs
lb <- kk - qz * kSE; ub <- kk + qz * kSE
this.out <- setNames(data.frame(.to3dp(kk), .to3dp(kSE), .to3dp(lb), .to3dp(ub)),
c('Estimate', 'SE', '2.5%', '97.5%'))
this.out
})
tab <- do.call(rbind, MakeTables)
nr <- nrow(tab)
tab$Parameter <- rownames(tab)
tab$Parameter <- paste0('$\\', tab$Parameter, '$')
tab2 <- as.data.frame(cbind(Parameter = tab$Parameter, apply(tab[, -5], 2, function(x) format(round(x, 3), nsmall = 3))))
tab3 <- cbind(Parameter = tab$Parameter, `Mean (SE)` = paste0(tab2$Estimate, ' (', tab2$SE, ')'),
`95% CI` = paste0('[', tab2$`2.5%`, ', ', tab2$`97.5%`, ']'))
# Splitting out into multiple columns -->
if(nr > 15 && is.null(max.row)){
cat('Consider breaking at a certain number of rows and presenting a "wider" table.\nnrows: ', nr, '\n')
}
if(!is.null(max.row)){
if(nr <= max.row) stop('max.row must exceed the number of rows in output table: ', nr, '.\n')
# Work out how many 'cbinds' we'll need to do.
num.splits <- (nr %/% max.row) + 1
nr.each <- suppressWarnings(split(1:nr, rep(1:num.splits, each = ceiling(nr/num.splits))))
split.tab <- lapply(nr.each, function(k){
x <- tab3[k,]
while(nrow(x) < max.row){
x <- rbind(x, c('-','-','-'))
}
x
})
tab3 <- do.call(cbind, split.tab)
}
xt <- xtable::xtable(tab3)
print(xt,
include.rownames = FALSE,
sanitize.text.function = identity)
}
fit2xtab(fullfit, 15)
fit2xtab(fullfit2, 15)
# Append zeta terms to bottom, time invariant so report separately
zetas
# Append zeta terms to bottom, time invariant so report separately
SEz <- SE[grepl('^zeta', names(SE))]
SEz
# Append zeta terms to bottom, time invariant so report separately
SEz <- SE[grepl('^zeta', names(SE))]; lb <- zetas - qz * SEz; ub <- zetas + qz * SEz
ub
lb
zet <- data.frame(Estimate = .to3dp(zetas), SE = .to3dp(SEz), `2.5%` = .to3dp(lb), `97.5%` = .to3dp(ub))
zet
zet <- data.frame(.to3dp(zetas), .to3dp(SEz), .to3dp(lb), .to3dp(ub))
zet
rbind(tab, zet)
tab
tab <- do.call(rbind, MakeTables)
tab
zetas <- setNames(fit$co$zeta, paste0('zeta_', 1:length(fit$co$zeta)))
zeta
zetas
# Append zeta terms to bottom, time invariant so report separately
SEz <- SE[grepl('^zeta', names(SE))]; lb <- zetas - qz * SEz; ub <- zetas + qz * SEz
zet <- data.frame(.to3dp(zetas), .to3dp(SEz), .to3dp(lb), .to3dp(ub))
zet
tab <- do.call(rbind, MakeTables)
# Append zeta terms to bottom, time invariant so report separately
SEz <- SE[grepl('^zeta', names(SE))]; lb <- zetas - qz * SEz; ub <- zetas + qz * SEz
zet <- data.frame(.to3dp(zetas), .to3dp(SEz), .to3dp(lb), .to3dp(ub))
tab <- rbind(tab, zet)
names(zet) <- names(tab)
zet
tab <- rbind(tab, zet)
tab
fit2xtab <- function(fit, max.row = NULL){
if(is.null(fit$SE)) stop('Need to run EM with post.process = T')
qz <- qnorm(.975)
.to3dp <- function(x) round(x, 3)
# Model fit info
K <- length(fit$ResponseInfo)
responses <- lapply(sapply(fit$ResponseInfo, strsplit, '\\s\\('), el, 1)
families <- unlist(fit$family)
# Standard errors and parameter estimates.
SE <- fit$SE
D <- fit$co$D
betas <- fit$co$beta
sigmas <- unlist(fit$co$sigma)
gammas <- fit$co$gamma
zetas <- setNames(fit$co$zeta, paste0('zeta_', 1:length(fit$co$zeta)))
MakeTables <- lapply(1:K, function(k){
nb <- names(betas)[grepl(responses[[k]], names(betas))]
nb2 <- paste0('beta_{', k, (seq(0, (length(nb) - 1))), '}')
beta <- setNames(betas[grepl(responses[[k]], names(betas))], nb2)
if(sigmas[k] != 0) sigma <- setNames(sigmas[k], paste0('sigma^2_', k)) else sigma <- NULL
gamma <- setNames(gammas[k], paste0('gamma_', k))
kk <- c(beta, sigma, gamma)
if(sigmas[k] != 0) sigma.name.lookup <- paste0(responses[[k]], '_var.e') else sigma.name.lookup <- NULL
kk.names.lookup <- c(nb, sigma.name.lookup, names(gamma))
kSE <- SE[match(kk.names.lookup, names(SE))]#SE associated with these coeffs
lb <- kk - qz * kSE; ub <- kk + qz * kSE
this.out <- setNames(data.frame(.to3dp(kk), .to3dp(kSE), .to3dp(lb), .to3dp(ub)),
c('Estimate', 'SE', '2.5%', '97.5%'))
this.out
})
tab <- do.call(rbind, MakeTables)
# Append zeta terms to bottom, time invariant so report separately
SEz <- SE[grepl('^zeta', names(SE))]; lb <- zetas - qz * SEz; ub <- zetas + qz * SEz
zet <- data.frame(.to3dp(zetas), .to3dp(SEz), .to3dp(lb), .to3dp(ub))
names(zet) <- names(tab)
tab <- rbind(tab, zet)
nr <- nrow(tab)
tab$Parameter <- rownames(tab)
tab$Parameter <- paste0('$\\', tab$Parameter, '$')
tab2 <- as.data.frame(cbind(Parameter = tab$Parameter, apply(tab[, -5], 2, function(x) format(round(x, 3), nsmall = 3))))
tab3 <- cbind(Parameter = tab$Parameter, `Mean (SE)` = paste0(tab2$Estimate, ' (', tab2$SE, ')'),
`95% CI` = paste0('[', tab2$`2.5%`, ', ', tab2$`97.5%`, ']'))
# Splitting out into multiple columns -->
if(nr > 15 && is.null(max.row)){
cat('Consider breaking at a certain number of rows and presenting a "wider" table.\nnrows: ', nr, '\n')
}
if(!is.null(max.row)){
if(nr <= max.row) stop('max.row must exceed the number of rows in output table: ', nr, '.\n')
# Work out how many 'cbinds' we'll need to do.
num.splits <- (nr %/% max.row) + 1
nr.each <- suppressWarnings(split(1:nr, rep(1:num.splits, each = ceiling(nr/num.splits))))
split.tab <- lapply(nr.each, function(k){
x <- tab3[k,]
while(nrow(x) < max.row){
x <- rbind(x, c('-','-','-'))
}
x
})
tab3 <- do.call(cbind, split.tab)
}
xt <- xtable::xtable(tab3)
print(xt,
include.rownames = FALSE,
sanitize.text.function = identity)
}
fullfit <- EM(long.formulas, surv.formula, data, families, control = list(correlated = F,
SEs = 'exact',
verbose = T,
maxit = 500))
fit2xtab(fullfit2, 15)
fit2xtab(fullfit2, 15)
tab <- do.call(rbind, MakeTables)
# Append zeta terms to bottom, time invariant so report separately
SEz <- SE[grepl('^zeta', names(SE))]; lb <- zetas - qz * SEz; ub <- zetas + qz * SEz
zet <- data.frame(.to3dp(zetas), .to3dp(SEz), .to3dp(lb), .to3dp(ub))
names(zet) <- names(tab)
tab <- rbind(tab, zet)
nr <- nrow(tab)
tab$Parameter <- rownames(tab)
tab$Parameter <- paste0('$\\', tab$Parameter, '$')
tab2 <- as.data.frame(cbind(Parameter = tab$Parameter, apply(tab[, -5], 2, function(x) format(round(x, 3), nsmall = 3))))
tab3 <- cbind(Parameter = tab$Parameter, `Mean (SE)` = paste0(tab2$Estimate, ' (', tab2$SE, ')'),
`95% CI` = paste0('[', tab2$`2.5%`, ', ', tab2$`97.5%`, ']'))
tab3
# Splitting out into multiple columns -->
if(nr > 15 && is.null(max.row)){
cat('Consider breaking at a certain number of rows and presenting a "wider" table.\nnrows: ', nr, '\n')
}
# Work out how many 'cbinds' we'll need to do.
num.splits <- (nr %/% max.row) + 1
nr.each <- suppressWarnings(split(1:nr, rep(1:num.splits, each = ceiling(nr/num.splits))))
nr.each
num.splits
num.splits
nr%/%max.row
# Work out how many 'cbinds' we'll need to do.
num.splits <- nr %/% max.row
nr.each <- suppressWarnings(split(1:nr, rep(1:num.splits, each = ceiling(nr/num.splits))))
nr.each
split.tab <- lapply(nr.each, function(k){
x <- tab3[k,]
while(nrow(x) < max.row){
x <- rbind(x, c('-','-','-'))
}
x
})
tab3 <- do.call(cbind, split.tab)
tab3
fit2xtab <- function(fit, max.row = NULL){
if(is.null(fit$SE)) stop('Need to run EM with post.process = T')
qz <- qnorm(.975)
.to3dp <- function(x) round(x, 3)
# Model fit info
K <- length(fit$ResponseInfo)
responses <- lapply(sapply(fit$ResponseInfo, strsplit, '\\s\\('), el, 1)
families <- unlist(fit$family)
# Standard errors and parameter estimates.
SE <- fit$SE
D <- fit$co$D
betas <- fit$co$beta
sigmas <- unlist(fit$co$sigma)
gammas <- fit$co$gamma
zetas <- setNames(fit$co$zeta, paste0('zeta_', 1:length(fit$co$zeta)))
MakeTables <- lapply(1:K, function(k){
nb <- names(betas)[grepl(responses[[k]], names(betas))]
nb2 <- paste0('beta_{', k, (seq(0, (length(nb) - 1))), '}')
beta <- setNames(betas[grepl(responses[[k]], names(betas))], nb2)
if(sigmas[k] != 0) sigma <- setNames(sigmas[k], paste0('sigma^2_', k)) else sigma <- NULL
gamma <- setNames(gammas[k], paste0('gamma_', k))
kk <- c(beta, sigma, gamma)
if(sigmas[k] != 0) sigma.name.lookup <- paste0(responses[[k]], '_var.e') else sigma.name.lookup <- NULL
kk.names.lookup <- c(nb, sigma.name.lookup, names(gamma))
kSE <- SE[match(kk.names.lookup, names(SE))]#SE associated with these coeffs
lb <- kk - qz * kSE; ub <- kk + qz * kSE
this.out <- setNames(data.frame(.to3dp(kk), .to3dp(kSE), .to3dp(lb), .to3dp(ub)),
c('Estimate', 'SE', '2.5%', '97.5%'))
this.out
})
tab <- do.call(rbind, MakeTables)
# Append zeta terms to bottom, time invariant so report separately
SEz <- SE[grepl('^zeta', names(SE))]; lb <- zetas - qz * SEz; ub <- zetas + qz * SEz
zet <- data.frame(.to3dp(zetas), .to3dp(SEz), .to3dp(lb), .to3dp(ub))
names(zet) <- names(tab)
tab <- rbind(tab, zet)
nr <- nrow(tab)
tab$Parameter <- rownames(tab)
tab$Parameter <- paste0('$\\', tab$Parameter, '$')
tab2 <- as.data.frame(cbind(Parameter = tab$Parameter, apply(tab[, -5], 2, function(x) format(round(x, 3), nsmall = 3))))
tab3 <- cbind(Parameter = tab$Parameter, `Mean (SE)` = paste0(tab2$Estimate, ' (', tab2$SE, ')'),
`95% CI` = paste0('[', tab2$`2.5%`, ', ', tab2$`97.5%`, ']'))
# Splitting out into multiple columns -->
if(nr > 15 && is.null(max.row)){
cat('Consider breaking at a certain number of rows and presenting a "wider" table.\nnrows: ', nr, '\n')
}
if(!is.null(max.row)){
if(nr <= max.row) stop('max.row must exceed the number of rows in output table: ', nr, '.\n')
# Work out how many 'cbinds' we'll need to do.
num.splits <- nr %/% max.row
nr.each <- suppressWarnings(split(1:nr, rep(1:num.splits, each = ceiling(nr/num.splits))))
split.tab <- lapply(nr.each, function(k){
x <- tab3[k,]
while(nrow(x) < max.row){
x <- rbind(x, c('-','-','-'))
}
x
})
tab3 <- do.call(cbind, split.tab)
}
xt <- xtable::xtable(tab3)
print(xt,
include.rownames = FALSE,
sanitize.text.function = identity)
}
fit2xtab(fullfit2, 15)
fit2xtab(fullfit, 15)
?xtable::print.xtable
?xtable
xt <- xtable::xtable(tab3,
caption = paste0("Elapsed time for approximate EM algorithm to converge and SE calculation was ", round(fit$EMtime + fit$postprocess.time, 2), " seconds."))
xt
fit2xtab <- function(fit, max.row = NULL){
if(is.null(fit$SE)) stop('Need to run EM with post.process = T')
qz <- qnorm(.975)
.to3dp <- function(x) round(x, 3)
# Model fit info
K <- length(fit$ResponseInfo)
responses <- lapply(sapply(fit$ResponseInfo, strsplit, '\\s\\('), el, 1)
families <- unlist(fit$family)
# Standard errors and parameter estimates.
SE <- fit$SE
D <- fit$co$D
betas <- fit$co$beta
sigmas <- unlist(fit$co$sigma)
gammas <- fit$co$gamma
zetas <- setNames(fit$co$zeta, paste0('zeta_', 1:length(fit$co$zeta)))
MakeTables <- lapply(1:K, function(k){
nb <- names(betas)[grepl(responses[[k]], names(betas))]
nb2 <- paste0('beta_{', k, (seq(0, (length(nb) - 1))), '}')
beta <- setNames(betas[grepl(responses[[k]], names(betas))], nb2)
if(sigmas[k] != 0) sigma <- setNames(sigmas[k], paste0('sigma^2_', k)) else sigma <- NULL
gamma <- setNames(gammas[k], paste0('gamma_', k))
kk <- c(beta, sigma, gamma)
if(sigmas[k] != 0) sigma.name.lookup <- paste0(responses[[k]], '_var.e') else sigma.name.lookup <- NULL
kk.names.lookup <- c(nb, sigma.name.lookup, names(gamma))
kSE <- SE[match(kk.names.lookup, names(SE))]#SE associated with these coeffs
lb <- kk - qz * kSE; ub <- kk + qz * kSE
this.out <- setNames(data.frame(.to3dp(kk), .to3dp(kSE), .to3dp(lb), .to3dp(ub)),
c('Estimate', 'SE', '2.5%', '97.5%'))
this.out
})
tab <- do.call(rbind, MakeTables)
# Append zeta terms to bottom, time invariant so report separately
SEz <- SE[grepl('^zeta', names(SE))]; lb <- zetas - qz * SEz; ub <- zetas + qz * SEz
zet <- data.frame(.to3dp(zetas), .to3dp(SEz), .to3dp(lb), .to3dp(ub))
names(zet) <- names(tab)
tab <- rbind(tab, zet)
nr <- nrow(tab)
tab$Parameter <- rownames(tab)
tab$Parameter <- paste0('$\\', tab$Parameter, '$')
tab2 <- as.data.frame(cbind(Parameter = tab$Parameter, apply(tab[, -5], 2, function(x) format(round(x, 3), nsmall = 3))))
tab3 <- cbind(Parameter = tab$Parameter, `Mean (SE)` = paste0(tab2$Estimate, ' (', tab2$SE, ')'),
`95% CI` = paste0('[', tab2$`2.5%`, ', ', tab2$`97.5%`, ']'))
# Splitting out into multiple columns -->
if(nr > 15 && is.null(max.row)){
cat('Consider breaking at a certain number of rows and presenting a "wider" table.\nnrows: ', nr, '\n')
}
if(!is.null(max.row)){
if(nr <= max.row) stop('max.row must exceed the number of rows in output table: ', nr, '.\n')
# Work out how many 'cbinds' we'll need to do.
num.splits <- nr %/% max.row
nr.each <- suppressWarnings(split(1:nr, rep(1:num.splits, each = ceiling(nr/num.splits))))
split.tab <- lapply(nr.each, function(k){
x <- tab3[k,]
while(nrow(x) < max.row){
x <- rbind(x, c('-','-','-'))
}
x
})
tab3 <- do.call(cbind, split.tab)
}
xt <- xtable::xtable(tab3,
caption = paste0("Elapsed time for approximate EM algorithm to converge and SE calculation was ", round(fit$EMtime + fit$postprocess.time, 2), " seconds."))
print(xt,
include.rownames = FALSE,
sanitize.text.function = identity)
}
fit2xtab(fullfit, 15)
fit2xtab(fullfit2, 15)
fit2xtab(trifit)
fit2xtab(trifit2)
save(fullfit, file = '/data/c0061461/fullfitnocorr.RData')
save(fullfit2, file = '/data/c0061461/fullfitcorr.RData')
q('no')
